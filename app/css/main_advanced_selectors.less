/* ==========================================================================
   IMPORT MIXINS ELEMENTS PRESETS
   ========================================================================== */
@import url("bootstrap.less");

/* ==========================================================================
   CONTAINERS
   ========================================================================== */
.container{
	padding: 16px;
}

/* ==========================================================================
   ADVANCED_SELECTORS.html
   ========================================================================== */
*{
	/* This selects EVERYTHING, don't use as much may have performance impact. */
	color: #424242;
}

.main{
	p + p{
		/* adjacent selector, only selects ps after a p, will never select the first p, you can use this with other elements too! */
		text-indent: 20px;
	}
	ul ~ p{
		/* sibling combinator, selects any p after a ul */
		color: #8f1212;
	}
	li[title]{
		font-size: 14px;
	}
	li[title="this is quite specific"]{
		/* You can also use attr*="value", attr^="value", attr~="value" and attr$="value, refer to the CSS docs for those. When you images next to specific links on say the wiki or other websites, this is how you do it. */
		text-decoration: underline;
	}
	blockquote{
		/* You can even use images for the before and after! */
		&:before{
			content:"BEFORE";
		}
		&:after{
			content:"AFTER";
		}
	}
	p:not(.dontselectthis){
		/* Negation selector, everything but something. */
		font-family: georgia;
	}
	article > p:nth-child(2n+1){
		/* The nth child can work with just numbers (3) pointing to the third element, or a formula like 2n+1 which selects based on cycling through 0 to infinity and selecting elements which are whole numbers, and not selecting those which are 0 or negative. */
		/* (2*0) + 1 = 1, (2*1) + 1 = 3, (2*2) + 1 = 5 */
		/* It selects odd elements! */
		/* Not that its the nth-child, which means it selects children, regardless of whether they are a p or not. In this case if they are not p, then it just skips over them. (We also used the direct descedant selector to ignore the blockquote) */
		/* Also see nth-last-child */
		&:first-letter{
			font-size: 50px;
		}
	}
	article > p:nth-of-type(2n+1){
		/* This time it really ignores the child elements and only counts the p elements, so its odd p elements, whereas the previous was odd child elements, but only apply if it was a direct p */
		/* also see nth-last-of-type */
		&:first-line{
			text-decoration: underline;
		}
	}
	ul li:first-child{
		/* Selects the first child as the li element of the ul */
		/* See last-child aswell. */
		margin: 20px;
		background: #ddd;
	}
	.surprise{
		ul:first-of-type li:nth-last-child(1){
			/* This selects the first ul to appear, then gets child li elements, but it is the nth-last-child at 1, thus getting the 2nd li element in the first ul elemet in .surprise! */
			/* Also see only-of-type and only-child */
			font-weight: bold;  
		}
	}
}

/* ==========================================================================
   RESPONSIVE
   ========================================================================== */
@import url("bootstrap-responsive.less");