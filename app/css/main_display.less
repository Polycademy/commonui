/* ==========================================================================
   IMPORT MIXINS ELEMENTS PRESETS
   ========================================================================== */
@import url("bootstrap.less");

/* ==========================================================================
   CONTAINERS
   ========================================================================== */
.container{
	padding: 16px;
}

/* ==========================================================================
   DISPLAY.html
   ========================================================================== */
.map{
	width: 1000px;
	height: 500px;
	margin: 0 auto;
	background: url("../img/map_transparent.png") no-repeat center;
	/* These apply to block level items like the divs. However for inline elements, these rules will behave slightly different differently. Mainly it will be the fact that inline elements stack horizontally and wrap around the parent container's width. */
	/* position: relative; */ /* Uncomment this to see how absolutes react to relatively positioned parent containers. */
	.static{
		/* Static positioning is the default, everything is according to the normal flow of the page. The normal flow always starts at position origin 0,0 from parent container. This rule is unnecessary as every element starts at position:static, but it's here for demonstration. */
		position: static;
		/* Notice these have no effects at all! These rules only apply to non-static elements. */
		left: 10px;
		right: 20px;
		top: 53px;
		bottom: 100px;
		z-index: -100;
	}
	.relative{
		/* Relative positioning positions the item relative to where it would be if it were static. It is like ghost positioning, it is positioned relative to its original static position, but other elements will still recognise that it exists at the static position. */
		position: relative;
		top: -20px;
		left: 60px;
	}
	.dummy{
		/* This is a dummy item to show how static elements recognise relative items but in a ghost like way. It still gets pushed down like as if the relative element was static. */
		position: static;
	}
	.absolute{
		/* Absolutely positioned goes full ghost! It no longer exists in the normal document flow, it positions itself relative to the origin of the first non-static parent container (usually a relative). If it can't find a non-static parent container, then it defaults to placing itself relative to the window html element (root node). */
		position: absolute;
		top: 50px;
		left: 680px;
	}
	.fixed{
		/* Fixed positioning keeps it fixed to the browser window. Its positioning is relative to the browser window too. */
		position: fixed;
		top: 300px;
		left: 500px;
	}
	.zindex{
		/* Use the zindex to structure your elements via 3 dimensional stacking. Basically it allows you to place elements behind and above other elements. */
		position: relative; /* To use zindex, it requires a position other than static. */
		z-index: -1;
		top: 131px;
		left: 277px;
		/* Try uncommenting these and see what happens in firebug or other web developer tools. Notice the box width and height difference. */
		/* display: inline; */
		/* display: inline-block; */
	}
}

/* ==========================================================================
   RESPONSIVE
   ========================================================================== */
@import url("bootstrap-responsive.less");
@import url("responsive_display.less");